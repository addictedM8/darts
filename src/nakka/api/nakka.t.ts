export interface Player {
  id: string;
  name: string;
  avg?: number;
  score: number;
}

export interface Match {
  matchStage: MatchStage;
  player1: Player;
  player2: Player;
}

export interface Tournament {
  id: string;
  title: string;
  date: Date;
  players: { [id: string]: string };
  matches: (Match | null)[];
  stats: Stats[]; //{ [id: string]: Object };
  // groupBO: tournament.rr_setting.limit_leg_count,
  // last32BO: tournament.t_setting.limit_leg_count,
}

export interface Group {
  [id: string]: { [id: string]: Match };
}

export interface Stats {
  name?: string;
  score?: number;
  darts?: number;
  winLeg?: number;
  leg?: number;
  a_b?: number;
  w_b?: number;
  winSet?: number;
  set?: number;
  ton00?: number;
  ton40?: number;
  ton80?: number;
  highOut?: number;
  best?: number;
  worst?: number;
  winDarts?: number;
  winCnt?: number;
  f9Score?: number;
  f9Darts?: number;
  r_g?: number;
  rank?: number;
  rnd?: number;
  rank_s2?: number;
  rnd_s2?: string;
  a?: number;
  acnt?: number;
}

export enum MatchStage {
  Group = 0,
  BO32 = 32,
  BO16 = 16,
  Quaterfinal = 8,
  Semifinal = 4,
  Final = 2,
}

// Generated by https://quicktype.io

export interface NakkaTournament {
  tdid: string;
  createTime: number;
  updateTime: number;
  status: number;
  ad: number;
  title: string;
  t_date: number;
  s_date: number;
  details: string;
  image: string;
  color: string;
  chat: number;
  show_avg: number;
  auto_complete: number;
  game_type: number;
  individual_pass: number;
  hide_sns: number;
  common_join: number;
  show_entry_no: number;
  rr_setting: RrSetting;
  t_setting: Setting;
  s2_setting: Setting;
  rr_table: Array<string[]>;
  rr_result: { [key: string]: { [key: string]: RrResult } }[];
  rr_rank: any[];
  t_table: Array<string[]>;
  t_result: TResult[];
  s2_table: any[];
  s2_result: any[];
  t_title: string[];
  t_init: { [key: string]: string };
  t3_table: any[];
  s2_3_table: any[];
  t3_result: any[];
  s2_3_result: any[];
  m_table: any[];
  m_result: any[];
  m_setting: Setting;
  lg_table: any[];
  lg_result: any[];
  lg_rank: any[];
  team_games: number;
  name_sep: string;
  dynamic_avg: number;
  private: number;
  entry_list: EntryList[];
  stats: Object;
}

export interface EntryList {
  tpid: string;
  name: string;
}

export interface Setting {
  matchs?: number;
  match_count?: number;
  auto_continue: number;
  direction?: number;
  limit: number;
  limit_leg_count: number;
  limit_set_count: number;
  limit_set_leg_count: number;
  startScore: number;
  limit_rounds: number;
  rounds: number;
  changeFirst: number;
  exitResult: number;
  schedule: any[];
  autoNext: number;
  setOrder: number;
  exclude_from_stats: number;
  tournament?: number;
  t_player_count?: number;
  t3?: number;
  game_setting?: GameSetting[];
  disp_no?: number;
  sequential?: number;
  show_no_all?: number;
  show_badge?: number;
}

export interface GameSetting {
  round: number;
  limit: number;
  limit_leg_count: number;
  limit_set_count: number;
  limit_set_leg_count: number;
}

export interface RrResult {
  r: number;
  a: number;
}

export interface RrSetting {
  round_robin: number;
  robin_count: number;
  robin_player_count: number;
  show_order: number;
  limit: number;
  limit_leg_count: number;
  drawMode: number;
  limit_set_count: number;
  limit_set_leg_count: number;
  startScore: number;
  limit_rounds: number;
  rounds: number;
  point: number;
  point_w: number;
  point_d: number;
  point_l: number;
  changeFirst: number;
  exitResult: number;
  schedule: any[];
  include_leg: number;
  autoNext: number;
  setOrder: number;
  exclude_from_stats: number;
  game_setting: any[];
}

export interface TResult {
  "4e4h"?: The4E4H;
  FNBC?: { [key: string]: RrResult };
  E9Dw?: { [key: string]: RrResult };
  nJ5u?: NJ5U;
  QlVP?: QlVP;
  jzW1?: { [key: string]: RrResult };
  Ng8Z: { [key: string]: RrResult };
  mBRB?: MBRB;
  ZqMV?: { [key: string]: RrResult };
  pCBi?: PCBI;
  NCho?: { [key: string]: RrResult };
  hll5?: Hll5;
  V2pZ?: V2PZ;
  uA9n?: { [key: string]: RrResult };
  "5B4L"?: { [key: string]: RrResult };
  uS7X?: US7X;
  T0uW: { [key: string]: RrResult };
  ZB4m?: ZB4M;
  Lgrb?: { [key: string]: RrResult };
  kMZb?: KMZb;
  MEwa?: MEwa;
  omW7?: { [key: string]: RrResult };
  "9uZV"?: The9UZV;
  rn62?: { [key: string]: RrResult };
  "2l5W"?: { [key: string]: RrResult };
  Vvpc?: Vvpc;
  "2lvg"?: The2Lvg;
  P6sQ?: { [key: string]: RrResult };
  XFix?: XFix;
  rvVp?: { [key: string]: RrResult };
  "3kRm"?: The3KRm;
  cJvE?: { [key: string]: RrResult };
}

export interface The2Lvg {
  P6sQ: RrResult;
}

export interface The3KRm {
  cJvE: RrResult;
}

export interface The4E4H {
  FNBC: RrResult;
}

export interface The9UZV {
  rn62: RrResult;
}

export interface MEwa {
  omW7: RrResult;
}

export interface QlVP {
  jzW1: RrResult;
}

export interface V2PZ {
  uA9n: RrResult;
}

export interface Vvpc {
  "2l5W": RrResult;
}

export interface XFix {
  rvVp: RrResult;
}

export interface ZB4M {
  T0uW: RrResult;
}

export interface Hll5 {
  NCho: RrResult;
}

export interface KMZb {
  Lgrb: RrResult;
}

export interface MBRB {
  Ng8Z: RrResult;
}

export interface NJ5U {
  E9Dw: RrResult;
}

export interface PCBI {
  ZqMV: RrResult;
}

export interface US7X {
  "5B4L": RrResult;
}
